#include <iostream>
#include <fstream>
#include "nlohmann/json.hpp"

#include "utilities/StringsGetter.hpp"
#include "TAHeaders/TATileConstructor.hpp"
#include "utilities/Utils.hpp"
#include "utilities/CliHandler.hpp"

using json = nlohmann::json;

// TODO: it should be helpful if you add the capability of making pdfs out of the result of the constructor.
//       however, remember that up to now the grapher only works taking all the xml files inside the inputFiles folder,
//       you'll have to change its behaviour (maybe with a command line option).
int main(int argc, char *argv[])
{
    try
    {
        CliHandler cliHandler(&argc, &argv);
        StringsGetter stringsGetter(cliHandler);

        std::vector<json> tiles;

        std::string nameTile = std::string();

        for (const auto &entry: getEntriesInAlphabeticalOrder(stringsGetter.getInputTilesDirPath()))
        {
            std::ifstream file(entry.path());

            if (static_cast<std::string>(entry.path()).find(".xml") == std::string::npos)
                continue;

            if (file.is_open())
            {
                // We obtain the json representation of a TA from the xml generated by UPPAAL.
                json j = getJsonFromFileStream(file);

                // nameTile = getStringGivenPosAndToken(getWordAfterLastSymbol(entry.path(), '/'), '.', 0);

                tiles.push_back(j);
            }
        }

        TATileConstructor taTileConstructor(tiles);
        json resultingTA = taTileConstructor.createTAFromTiles();

        std::cout << "\n\nResultingTA:\n\n";
        std::cout << std::setw(4) << resultingTA << std::endl;

    } catch (CommandNotProvidedException &e)
    {
        std::cerr << BHRED << e.what() << reset << std::endl;
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}
